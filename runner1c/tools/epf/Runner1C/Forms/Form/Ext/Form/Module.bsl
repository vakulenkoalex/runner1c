
// работает в режим совместимости "Версия 8.2.16".
// отсутствуют все методы на Стр*.

#Область ОписаниеПеременных

&НаКлиенте
Перем Операции; // Название выполняемой операции.

&НаКлиенте
Перем ТекстовыйДокумент; // Кэш для показа ошибок.

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПутьКПлатформе = ПутьКПлатформе();
	СтрокаПодключенияКБазе = СтрокаСоединенияИнформационнойБазы();
	Логин = ИмяПользователяНаСервере();

	ЗаполнитьСписокВыбораТипаОперации();
	ПрочитатьПутьКРепозиторию();
	
	Если ПустаяСтрока(ТипОперации) Тогда
		ТипОперации = Операции.ПолнаяВыгрузкаCF;
	КонецЕсли;
	
	УстановитьВидимостьЭлементов();
	ВывестиВерсиюПакета();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ПустаяСтрока(Логин) Тогда
		ПроверяемыеРеквизиты.Добавить("Пароль");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сделать(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВыполнитьОперациюСВопросомЗавершение", ЭтаФорма);
	
	Если ТипОперации = Операции.СоздатьEPF Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("РезультатВопросаПередОперациейСозданияEpf", ЭтаФорма, Оповещение),
		               "Будут заново созданы файлы. Продолжить?",
		               РежимДиалогаВопрос.ДаНет,
		               60,
		               КодВозвратаДиалога.Нет,
		               "Внимание",
		               КодВозвратаДиалога.Нет);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПутьКПлатформеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораФайла(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПапкаВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораФайла(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТипОперацииПриИзменении(Элемент)
	УстановитьВидимостьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

&НаКлиенте
Процедура УстановитьПапкуВыгрузкиПоПутиВФайле(Знач Существует, Знач ДополнительныеПараметры) Экспорт
	
	Если Не Существует Тогда
		Возврат;
	КонецЕсли;
	
	ЧтениеТекста = Новый ЧтениеТекста(ДополнительныеПараметры.ИмяФайла);
	ПутьКРепозиторию = ЧтениеТекста.ПрочитатьСтроку();
	ЧтениеТекста.Закрыть();
	
	ПапкаВыгрузки = ПутьКРепозиторию;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВыбранныйПуть(Знач ВыбранныеФайлы, Знач ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма[ДополнительныеПараметры.ИмяЭлемента] = ВыбранныеФайлы[0];
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатВопросаПередОперациейСозданияEpf(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, РезультатВопроса = КодВозвратаДиалога.Да);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюСВопросомЗавершение(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Этап Из ПолучитьЭтапы(ТипОперации) Цикл
		ПараметрыКоманднойСтроки = РеквизитыФормыВСтруктуру();
		ПараметрыКоманднойСтроки.Вставить("Команда", Этап.Команда);
		ЗапуститьКоманду(Этап.СтрокаДляЗапуска, ПараметрыКоманднойСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧтениеЛогаЗавершение(Знач ДополнительныеПараметры) Экспорт
	ТекстовыйДокумент.Показать("Ошибка при выполнении операции");
	НачатьУдалениеФайлов(Неопределено, ДополнительныеПараметры.Лог);
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьКомандуЗавершение(Знач КодВозврата, Знач ДополнительныеПараметры) Экспорт
	
	Если КодВозврата = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ДополнительныеПараметры.Лог);
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПроверкаСуществованияЛога",
	                                                          ЭтаФорма,
	                                                          ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСуществованияЛога(Знач Существует, Знач ДополнительныеПараметры) Экспорт
	
	Если Не Существует Тогда
		ПоказатьПредупреждение( , "Команда не выполнилась. Лог не найден");
		Возврат;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.НачатьЧтение(Новый ОписаниеОповещения("ЧтениеЛогаЗавершение",
	                                                        ЭтаФорма,
	                                                        Новый Структура("Лог", ДополнительныеПараметры.Лог)),
	                               ДополнительныеПараметры.Лог,
	                               КодировкаТекста.UTF8);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПутьКПлатформе()
	// для linux нужно по другому
	Возврат СтрЗаменить(КаталогПрограммы(), "\bin\", "");
КонецФункции

&НаКлиенте
Процедура ЗапуститьКоманду(Знач СтрокаДляЗапуска, Знач ПараметрыКоманднойСтроки)
	
	Команда = ПодставитьПараметрыВСтроку(СтрокаЗапускаСкрипта(Истина, Отладка) + " " + СтрокаДляЗапуска, ПараметрыКоманднойСтроки);
	
	Если Отладка Тогда
		Сообщение(Команда);
	Иначе
		Описание = Новый ОписаниеОповещения("ЗапуститьКомандуЗавершение",
											ЭтаФорма,
											Новый Структура("Лог", ПараметрыКоманднойСтроки.Лог));
		НачатьЗапускПриложения(Описание,
								Команда,
								,
								Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РеквизитыФормыВСтруктуру()
	
	ПапкаВыгрузкиБезСлеша = УбратьСКонцаРазделительПути(ПапкаВыгрузки);
	ПлатформаБезСлеша = УбратьСКонцаРазделительПути(ПутьКПлатформе);
	
	НастройкиВыгрузкиРасширений = Новый Структура("ПапкаВыгрузки, ИмяПапки", ПапкаВыгрузкиБезСлеша, ?(Не ВыгружатьРасширенияВSpec, "lib", "spec"));
	
	Структура = Новый Структура;
	Структура.Вставить("КодРазблокировки",          ?(ПустаяСтрока(КодРазблокировки), "None", КодРазблокировки));
	Структура.Вставить("Логин",                     Логин);
	Структура.Вставить("ПапкаВыгрузки",             ПапкаВыгрузкиБезСлеша);
	Структура.Вставить("ПапкаВыгрузкиКонфигурации", СоединитьПути(ПапкаВыгрузкиБезСлеша, "cf"));
	Структура.Вставить("ПапкаВыгрузкиРасширений",   ПодставитьПараметрыВСтроку(СоединитьПути("%ПапкаВыгрузки%", "%ИмяПапки%", "ext"), НастройкиВыгрузкиРасширений));
	Структура.Вставить("Пароль",                    Пароль);
	Структура.Вставить("ПутьКПлатформе",            ПлатформаБезСлеша);
	Структура.Вставить("СтрокаПодключенияКБазе",    СтрокаПодключенияКБазе);
	Структура.Вставить("Лог",                       ПолучитьИмяВременногоФайла("txt"));
	
	Возврат Структура;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяПользователяНаСервере()
	Возврат ИмяПользователя();
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокВыбораТипаОперации()
	
	Для Каждого ТипОперции Из Операции Цикл
		Элементы.ТипОперации.СписокВыбора.Добавить(ТипОперции.Значение);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьПутьКРепозиторию()
	
	Если Не ИнформационнаяБазаФайловая(СтрокаПодключенияКБазе) Тогда
		Возврат;
	КонецЕсли;
	
	Структура = ПараметрыИзСтроки(СтрокаПодключенияКБазе);
	
	ПутьКФайлуРепозитория = СоединитьПути(Структура.File, "GitPath.txt");
	
	Файл = Новый Файл(ПутьКФайлуРепозитория);
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("УстановитьПапкуВыгрузкиПоПутиВФайле",
	                                                          ЭтаФорма,
	                                                          Новый Структура("ИмяФайла", ПутьКФайлуРепозитория)));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораФайла(Знач Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		
	Если ЗначениеЗаполнено(Элемент.ТекстРедактирования) Тогда
		
		Файл = Новый Файл(Элемент.ТекстРедактирования);
		ДиалогВыбораФайла.Каталог = Файл.Путь;
		
	КонецЕсли;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("УстановитьВыбранныйПуть",
	                                                    ЭтаФорма,
	                                                    Новый Структура("ИмяЭлемента", Элемент.Имя)));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонфигурацияСОшибкамиВыгрузки()
	
	Результат = Ложь;
	
	Если Метаданные.РегистрыСведений.Найти("ВерсииПодсистем") <> Неопределено 
		Или (Метаданные.Имя = "УправлениеТорговлей" И Лев(Метаданные.Версия, 4) = "10.3") Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СтрокаЗапускаСкрипта(Знач ТекущаяБаза = Истина, Знач Отладка = Ложь)
	
	Если ПодменитьПутьRunner Тогда
		ВызватьИсключение "Не реализовано";
	Иначе
		Шаблон = "runner1c";
	КонецЕсли;
	
	Если Отладка Тогда
		Шаблон = Шаблон + " --debug";
	КонецЕсли;
	Шаблон = Шаблон + " %Команда%";
	
	ПараметрыДляДобавления = Новый Массив;
	
	Если ТекущаяБаза Тогда
		
		ПараметрыДляДобавления.Добавить(" --log ""%Лог%""");
		ПараметрыДляДобавления.Добавить("silent");
		ПараметрыДляДобавления.Добавить("path ""%ПутьКПлатформе%""");
	
		Если Не ПустаяСтрока(КодРазблокировки) Тогда
			ПараметрыДляДобавления.Добавить("access %КодРазблокировки%");
		КонецЕсли;
		
		Если Не ПустаяСтрока(Логин) Тогда
			ПараметрыДляДобавления.Добавить("login ""%Логин%""");
			ПараметрыДляДобавления.Добавить("password ""%Пароль%""");
		КонецЕсли;
		
		ПараметрыДляДобавления.Добавить("connection ""%СтрокаПодключенияКБазе%""");
		
	КонецЕсли;
	
	Возврат Шаблон + СобратьСтрокуИзПодстрок(ПараметрыДляДобавления, " --");
	
КонецФункции

&НаКлиенте
Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "")
			
	Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	Возврат Найти(Врег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
	
КонецФункции

&НаКлиенте
Функция ПараметрыИзСтроки(Знач СтрокаПараметров)
	
	Результат = Новый Структура;
	
	СимволДвойныеКавычки = Символ(34); // (")
	
	МассивПодстрок = РазложитьСтрокуВМассивПодстрок(СтрокаПараметров, ";");
	
	Для Каждого СтрокаПараметра Из МассивПодстрок Цикл
		
		ПозицияПервогоЗнакаРавенства = Найти(СтрокаПараметра, "=");
		
		// Получаем имя параметра
		ИмяПараметра = СокрЛП(Лев(СтрокаПараметра, ПозицияПервогоЗнакаРавенства - 1));
		
		// Получаем значение параметра.
		ЗначениеПараметра = СокрЛП(Сред(СтрокаПараметра, ПозицияПервогоЗнакаРавенства + 1));
		
		Если  Лев(ЗначениеПараметра, 1) = СимволДвойныеКавычки
			И Прав(ЗначениеПараметра, 1) = СимволДвойныеКавычки Тогда
			
			ЗначениеПараметра = Сред(ЗначениеПараметра, 2, СтрДлина(ЗначениеПараметра) - 2);
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ИмяПараметра) Тогда
			
			Результат.Вставить(ИмяПараметра, ЗначениеПараметра);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПодставитьПараметрыВСтроку(Шаблон, Знач ПарметрыСтроки)
	
	Строка = Шаблон;
	Для Каждого Элемент Из ПарметрыСтроки Цикл
		Строка = СтрЗаменить(Строка, "%" + Элемент.Ключ + "%", Элемент.Значение);
	КонецЦикла;
		
	Возврат Строка;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура Сообщение(Знач Текст)
	
	СообщениеПользователю = Новый СообщениеПользователю;
	СообщениеПользователю.Текст = Текст;
	СообщениеПользователю.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",")
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока Истина Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр, Поз - 1));
			Стр = СокрЛ(Сред(Стр, Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока Истина Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр, Поз - 1));
			Стр = Сред(Стр, Поз + ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СобратьСтрокуИзПодстрок(Знач Строки, Знач Разделитель)
	
	Результат = "";
	
	Для Каждого Строка Из Строки Цикл
		Результат = Результат + ?(ПустаяСтрока(Результат), "", Разделитель) + Строка;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьЭлементов()
	Элементы.ВыгружатьРасширенияВSpec.Видимость = (ТипОперации = Операции.ВыгрузкаCFE);
КонецПроцедуры

&НаСервере
Функция ИмяФайлаОбработки()
	Возврат РеквизитФормыВЗначение("Объект").ИспользуемоеИмяФайла;
КонецФункции

&НаКлиенте
Процедура ВывестиВерсиюПакета()
	
	ЧтениеТекста = Новый ЧтениеТекста(ПутьДоRunner() + РазделительПути() + "__init__.py");
	СтрокаВерсии = ЧтениеТекста.ПрочитатьСтроку();
	ЧтениеТекста.Закрыть();
	
	ПараметрыВерсии = РазложитьСтрокуВМассивПодстрок(СтрокаВерсии, "=");
	Версия = СокрЛП(ПараметрыВерсии[1]);
	
	Заголовок = Версия;
	
КонецПроцедуры

&НаКлиенте
Функция РазделительПути()
	Возврат "\";
КонецФункции

&НаКлиенте
Функция СоединитьПути(Знач ПутьКаталога, Знач Элемент1, Знач Элемент2 = "")
	
	Массив = Новый Массив;
	Массив.Добавить(ПутьКаталога);
	Массив.Добавить(Элемент1);
	Если Не ПустаяСтрока(Элемент2) Тогда
		Массив.Добавить(Элемент2);
	КонецЕсли;
	
	Возврат СобратьСтрокуИзПодстрок(Массив, РазделительПути());
	
КонецФункции

&НаКлиенте
Функция УбратьСКонцаРазделительПути(Знач Путь)
	
	Результат = Путь;
	Если Прав(Путь, 1) = РазделительПути() Тогда
		Результат = Лев(Результат, СтрДлина(Результат) - 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьЭтапы(Знач ВыбраннаяОперация)
	
	Массив = Новый Массив();
	
	СтрокаДляЗапуска = "";
	
	Если ВыбраннаяОперация = Операции.ПолнаяВыгрузкаCF Или ВыбраннаяОперация = Операции.ЧастичнаяВыгрузкаCF Тогда
		
		СтрокаДляЗапуска = "--folder ""%ПапкаВыгрузкиКонфигурации%""";
		Если КонфигурацияСОшибкамиВыгрузки() Тогда
			СтрокаДляЗапуска = СтрокаДляЗапуска + " --repair";
		КонецЕсли;
		Если ВыбраннаяОперация = Операции.ЧастичнаяВыгрузкаCF Тогда
			СтрокаДляЗапуска = СтрокаДляЗапуска + " --update";
		КонецЕсли;
		
		Массив.Добавить(СоздатьЭтап(СтрокаДляЗапуска, "dump_config"));
		
	ИначеЕсли ВыбраннаяОперация = Операции.ВыгрузкаCFE Тогда
		
		СтрокаДляЗапуска = "--folder ""%ПапкаВыгрузкиРасширений%""";
		Массив.Добавить(СоздатьЭтап(СтрокаДляЗапуска, "dump_extensions"));
		
	ИначеЕсли ВыбраннаяОперация = Операции.ПолнаяВыгрузкаEPF Или ВыбраннаяОперация = Операции.ЧастичнаяВыгрузкаEPF Тогда
		
		СтрокаДляЗапуска = "--folder ""%ПапкаВыгрузки%""";
		Если ВыбраннаяОперация = Операции.ПолнаяВыгрузкаEPF Тогда
			СтрокаДляЗапуска = СтрокаДляЗапуска + " --clear_hash";
		КонецЕсли;
		
		Массив.Добавить(СоздатьЭтап(СтрокаДляЗапуска, "sync"));
		
	ИначеЕсли ВыбраннаяОперация = Операции.СоздатьEPF Тогда
		
		СтрокаДляЗапуска = "--folder ""%ПапкаВыгрузки%"" --create";
		Массив.Добавить(СоздатьЭтап(СтрокаДляЗапуска, "sync"));
		
	ИначеЕсли ВыбраннаяОперация = Операции.ЗагрузитьCF Тогда
		
		СтрокаДляЗапуска = "--folder ""%ПапкаВыгрузкиКонфигурации%""";
		Массив.Добавить(СоздатьЭтап(СтрокаДляЗапуска, "load_config"));
		
		СтрокаДляЗапуска = "--folder ""%ПапкаВыгрузкиРасширений%""";
		Массив.Добавить(СоздатьЭтап(СтрокаДляЗапуска, "load_extension"));
		
	Иначе
		ВызватьИсключение "операция не определена";
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

&НаКлиенте
Функция ПутьДоRunner()
	
	Разделитель = РазделительПути();
	
	ПутьОбработки = РазложитьСтрокуВМассивПодстрок(ИмяФайлаОбработки(), Разделитель);
	ПутьОбработки.Удалить(ПутьОбработки.Количество() - 1);
	ПутьОбработки.Удалить(ПутьОбработки.Количество() - 1);
	ПутьОбработки.Удалить(ПутьОбработки.Количество() - 1);
	ПутьОбработки.Удалить(ПутьОбработки.Количество() - 1);
	
	ПутьВерсии = СобратьСтрокуИзПодстрок(ПутьОбработки, Разделитель);
	
	Возврат ПутьВерсии;
	
КонецФункции

&НаКлиенте
Функция СоздатьЭтап(Знач СтрокаДляЗапуска, Знач Команда)
	Возврат Новый Структура("СтрокаДляЗапуска, Команда", СтрокаДляЗапуска, Команда);
КонецФункции

#КонецОбласти

#Область Инициализация

Операции = Новый Структура;
Операции.Вставить("ПолнаяВыгрузкаCF", "CF Полная Выгрузка");
Операции.Вставить("ЧастичнаяВыгрузкаCF", "CF Частичная Выгрузка");
Операции.Вставить("ПолнаяВыгрузкаEPF", "EPF Полная Выгрузка");
Операции.Вставить("ЧастичнаяВыгрузкаEPF", "EPF Частичная Выгрузка");
Операции.Вставить("СоздатьEPF", "EPF Создать");
Операции.Вставить("ВыгрузкаCFE", "CFE Выгрузка");
Операции.Вставить("ЗагрузитьCF", "Загрузить конфигурацию");

#КонецОбласти
